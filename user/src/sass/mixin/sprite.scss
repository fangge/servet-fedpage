/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$icon-footer-name: 'icon-footer';
$icon-footer-x: 0px;
$icon-footer-y: 0px;
$icon-footer-offset-x: 0px;
$icon-footer-offset-y: 0px;
$icon-footer-width: 144px;
$icon-footer-height: 32px;
$icon-footer-total-width: 144px;
$icon-footer-total-height: 127px;
$icon-footer-image: '../images/sprite.png';
$icon-footer: (0px, 0px, 0px, 0px, 144px, 32px, 144px, 127px, '../images/sprite.png', 'icon-footer', );
$icon-heart-name: 'icon-heart';
$icon-heart-x: 24px;
$icon-heart-y: 77px;
$icon-heart-offset-x: -24px;
$icon-heart-offset-y: -77px;
$icon-heart-width: 18px;
$icon-heart-height: 17px;
$icon-heart-total-width: 144px;
$icon-heart-total-height: 127px;
$icon-heart-image: '../images/sprite.png';
$icon-heart: (24px, 77px, -24px, -77px, 18px, 17px, 144px, 127px, '../images/sprite.png', 'icon-heart', );
$icon-lock-open-name: 'icon-lock-open';
$icon-lock-open-x: 120px;
$icon-lock-open-y: 36px;
$icon-lock-open-offset-x: -120px;
$icon-lock-open-offset-y: -36px;
$icon-lock-open-width: 20px;
$icon-lock-open-height: 22px;
$icon-lock-open-total-width: 144px;
$icon-lock-open-total-height: 127px;
$icon-lock-open-image: '../images/sprite.png';
$icon-lock-open: (120px, 36px, -120px, -36px, 20px, 22px, 144px, 127px, '../images/sprite.png', 'icon-lock-open', );
$icon-lock-name: 'icon-lock';
$icon-lock-x: 0px;
$icon-lock-y: 77px;
$icon-lock-offset-x: 0px;
$icon-lock-offset-y: -77px;
$icon-lock-width: 20px;
$icon-lock-height: 22px;
$icon-lock-total-width: 144px;
$icon-lock-total-height: 127px;
$icon-lock-image: '../images/sprite.png';
$icon-lock: (0px, 77px, 0px, -77px, 20px, 22px, 144px, 127px, '../images/sprite.png', 'icon-lock', );
$icon-logo-name: 'icon-logo';
$icon-logo-x: 0px;
$icon-logo-y: 36px;
$icon-logo-offset-x: 0px;
$icon-logo-offset-y: -36px;
$icon-logo-width: 77px;
$icon-logo-height: 37px;
$icon-logo-total-width: 144px;
$icon-logo-total-height: 127px;
$icon-logo-image: '../images/sprite.png';
$icon-logo: (0px, 36px, 0px, -36px, 77px, 37px, 144px, 127px, '../images/sprite.png', 'icon-logo', );
$icon-plus-name: 'icon-plus';
$icon-plus-x: 81px;
$icon-plus-y: 36px;
$icon-plus-offset-x: -81px;
$icon-plus-offset-y: -36px;
$icon-plus-width: 35px;
$icon-plus-height: 35px;
$icon-plus-total-width: 144px;
$icon-plus-total-height: 127px;
$icon-plus-image: '../images/sprite.png';
$icon-plus: (81px, 36px, -81px, -36px, 35px, 35px, 144px, 127px, '../images/sprite.png', 'icon-plus', );
$icon-user-name: 'icon-user';
$icon-user-x: 0px;
$icon-user-y: 103px;
$icon-user-offset-x: 0px;
$icon-user-offset-y: -103px;
$icon-user-width: 18px;
$icon-user-height: 24px;
$icon-user-total-width: 144px;
$icon-user-total-height: 127px;
$icon-user-image: '../images/sprite.png';
$icon-user: (0px, 103px, 0px, -103px, 18px, 24px, 144px, 127px, '../images/sprite.png', 'icon-user', );
$spritesheet-width: 144px;
$spritesheet-height: 127px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($icon-footer, $icon-heart, $icon-lock-open, $icon-lock, $icon-logo, $icon-plus, $icon-user, );
$spritesheet: (144px, 127px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
